{"version":3,"file":"NinePatch.js","sourceRoot":"","sources":["../../../../../src/com/koreez/plugin/ninepatch/NinePatch.ts"],"names":[],"mappings":"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","sourcesContent":["import { IPatchesConfig, normalizePatchesConfig } from \"./IPatchesConfig\";\n\nexport class NinePatch extends Phaser.GameObjects.Container {\n    private static readonly __BASE: string = \"__BASE\";\n    private static readonly patches: string[] = [\"[0][0]\", \"[1][0]\", \"[2][0]\", \"[0][1]\", \"[1][1]\", \"[2][1]\", \"[0][2]\", \"[1][2]\", \"[2][2]\"];\n\n    private originTexture: Phaser.Textures.Texture;\n    private originFrame: Phaser.Textures.Frame;\n    private config: IPatchesConfig;\n    private finalXs: number[];\n    private finalYs: number[];\n    private internalTint: number;\n\n    constructor(\n        scene: Phaser.Scene,\n        x: number,\n        y: number,\n        width: number,\n        height: number,\n        key: string,\n        frame?: string | number,\n        config?: IPatchesConfig\n    ) {\n        super(scene, x, y);\n        this.config = config || this.scene.cache.custom.ninePatch.get(frame ? `${frame}` : key);\n        normalizePatchesConfig(this.config);\n        this.setSize(width, height);\n        this.setTexture(key, frame);\n    }\n\n    public resize(width: number, height: number): this {\n        width = Math.round(width);\n        height = Math.round(height);\n        if (!this.config) {\n            return this;\n        }\n        if (this.width === width && this.height === height) {\n            return this;\n        }\n        width = Math.max(width, this.config.left + this.config.right);\n        height = Math.max(height, this.config.top + this.config.bottom);\n        this.setSize(width, height);\n        this.drawPatches();\n        return this;\n    }\n\n    public setTexture(key: string, frame?: string | integer): this {\n        this.originTexture = this.scene.textures.get(key);\n        this.setFrame(frame);\n        return this;\n    }\n\n    public setFrame(frame: string | integer): this {\n        this.originFrame = (this.originTexture.frames as any)[frame] || (this.originTexture.frames as any)[NinePatch.__BASE];\n        this.createPatches();\n        this.drawPatches();\n        return this;\n    }\n\n    public setSize(width: number, height: number): this {\n        super.setSize(width, height);\n        // These are the positions we need the eventual texture to have\n        this.finalXs = [0, this.config.left, this.width - this.config.right, this.width];\n        this.finalYs = [0, this.config.top, this.height - this.config.bottom, this.height];\n        return this;\n    }\n\n    public setTint(tint: number): this {\n        this.tint = tint;\n        return this;\n    }\n\n    public setTintFill(tint: number): this {\n        this.tint = tint;\n        this.tintFill = true;\n        return this;\n    }\n\n    public clearTint(): this {\n        this.each((patch: Phaser.GameObjects.Image) => patch.clearTint());\n        this.internalTint = undefined;\n        return this;\n    }\n\n    public get tintFill(): boolean {\n        return this.first && (this.first as Phaser.GameObjects.Image).tintFill;\n    }\n\n    public set tintFill(value: boolean) {\n        this.each((patch: Phaser.GameObjects.Image) => (patch.tintFill = value));\n    }\n\n    public set tint(value: number) {\n        this.each((patch: Phaser.GameObjects.Image) => patch.setTint(value));\n        this.internalTint = value;\n    }\n\n    get isTinted(): boolean {\n        return this.first && (this.first as Phaser.GameObjects.Image).isTinted;\n    }\n\n    private createPatches(): void {\n        // The positions we want from the base texture\n        const textureXs: number[] = [0, this.config.left, this.originFrame.width - this.config.right, this.originFrame.width];\n        const textureYs: number[] = [0, this.config.top, this.originFrame.height - this.config.bottom, this.originFrame.height];\n        let patchIndex: number = 0;\n        for (let yi: number = 0; yi < 3; yi++) {\n            for (let xi: number = 0; xi < 3; xi++) {\n                this.createPatchFrame(\n                    this.getPatchNameByIndex(patchIndex),\n                    textureXs[xi], // x\n                    textureYs[yi], // y\n                    textureXs[xi + 1] - textureXs[xi], // width\n                    textureYs[yi + 1] - textureYs[yi] // height\n                );\n                ++patchIndex;\n            }\n        }\n    }\n\n    private drawPatches(): void {\n        const tintFill = this.tintFill;\n        this.removeAll(true);\n        let patchIndex: number = 0;\n        for (let yi: number = 0; yi < 3; yi++) {\n            for (let xi: number = 0; xi < 3; xi++) {\n                // @ts-ignore\n                const patch: Phaser.Textures.Frame = this.originTexture.frames[this.getPatchNameByIndex(patchIndex)];\n                const patchImg = new Phaser.GameObjects.Image(this.scene, 0, 0, patch.texture.key, patch.name);\n                patchImg.setOrigin(0);\n                patchImg.setPosition(this.finalXs[xi] - this.width * this.originX, this.finalYs[yi] - this.height * this.originY);\n                patchImg.setScale(\n                    (this.finalXs[xi + 1] - this.finalXs[xi]) / patch.width,\n                    (this.finalYs[yi + 1] - this.finalYs[yi]) / patch.height\n                );\n                this.add(patchImg);\n                patchImg.setTint(this.internalTint);\n                patchImg.tintFill = tintFill;\n                ++patchIndex;\n            }\n        }\n    }\n\n    private createPatchFrame(patch: string, x: number, y: number, width: number, height: number): void {\n        if (this.originTexture.frames.hasOwnProperty(patch)) {\n            return;\n        }\n        this.originTexture.add(patch, this.originFrame.sourceIndex, this.originFrame.cutX + x, this.originFrame.cutY + y, width, height);\n    }\n\n    private getPatchNameByIndex(index: number): string {\n        return `${this.originFrame.name}|${NinePatch.patches[index]}`;\n    }\n}\n"]}